name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  unix-gcc-x86_64:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-unix-gcc-x86_64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-unix-gcc-x86_64 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-unix-gcc-x86_64
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  unix-gcc-i386:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Architecture
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq build-essential gcc-multilib

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build-unix-gcc-i386 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/gcc-x86_64-i386-cross.cmake

    - name: Build
      run: cmake --build ${{github.workspace}}/build-unix-gcc-i386 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-unix-gcc-i386
      run: ctest -C ${{env.BUILD_TYPE}}

  unix-clang-x86_64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: CC=clang cmake -B ${{github.workspace}}/build-unix-clang-x86_64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build-unix-clang-x86_64 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-unix-clang-x86_64
      run: ctest -C ${{env.BUILD_TYPE}}

  unix-clang-i386:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Architecture
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq build-essential gcc-multilib

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build-unix-clang-i386 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/clang-x86_64-i386-cross.cmake

    - name: Build
      run: cmake --build ${{github.workspace}}/build-unix-clang-i386 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-unix-clang-i386
      run: ctest -C ${{env.BUILD_TYPE}}

  win-msvc-x64:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build-win-msvc-x64 -A x64

    - name: Build
      run: cmake --build ${{github.workspace}}/build-win-msvc-x64 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-win-msvc-x64
      run: ctest -C ${{env.BUILD_TYPE}}

  win-msvc-win32:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build-win-msvc-win32 -A Win32

    - name: Build
      run: cmake --build ${{github.workspace}}/build-win-msvc-win32 --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-win-msvc-win32
      run: ctest -C ${{env.BUILD_TYPE}}
